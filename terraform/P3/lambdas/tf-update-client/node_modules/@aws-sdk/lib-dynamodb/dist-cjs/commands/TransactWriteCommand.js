"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactWriteCommand = exports.$Command = exports.DynamoDBDocumentClientCommand = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const smithy_client_1 = require("@smithy/smithy-client");
Object.defineProperty(exports, "$Command", { enumerable: true, get: function () { return smithy_client_1.Command; } });
const DynamoDBDocumentClientCommand_1 = require("../baseCommand/DynamoDBDocumentClientCommand");
Object.defineProperty(exports, "DynamoDBDocumentClientCommand", { enumerable: true, get: function () { return DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand; } });
const utils_1 = require("../commands/utils");
class TransactWriteCommand extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
    constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = {
            TransactItems: {
                "*": {
                    ConditionCheck: {
                        Key: utils_1.ALL_VALUES,
                        ExpressionAttributeValues: utils_1.ALL_VALUES,
                    },
                    Put: {
                        Item: utils_1.ALL_VALUES,
                        ExpressionAttributeValues: utils_1.ALL_VALUES,
                    },
                    Delete: {
                        Key: utils_1.ALL_VALUES,
                        ExpressionAttributeValues: utils_1.ALL_VALUES,
                    },
                    Update: {
                        Key: utils_1.ALL_VALUES,
                        ExpressionAttributeValues: utils_1.ALL_VALUES,
                    },
                },
            },
        };
        this.outputKeyNodes = {
            ItemCollectionMetrics: {
                "*": {
                    "*": {
                        ItemCollectionKey: utils_1.ALL_VALUES,
                    },
                },
            },
        };
        this.clientCommand = new client_dynamodb_1.TransactWriteItemsCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler = this.clientCommand.resolveMiddleware(stack, configuration, options);
        return async () => handler(this.clientCommand);
    }
}
exports.TransactWriteCommand = TransactWriteCommand;
